#ifndef GAMESTATE_HPP
#define GAMESTATE_HPP

class StateManager;

///////////////////////////////////////////////////////////
/// \brief A GameState is a piece of the game
///
///////////////////////////////////////////////////////////
class GameState
{
public:
    
	// ================================
	// ====>> MEMBER FUNCTIONS
	// ================================
    
	///////////////////////////////////////////////////////////
	/// \brief Virtual destructor
	///
	///////////////////////////////////////////////////////////
	virtual ~GameState();
    
    ///////////////////////////////////////////////////////////
    /// \brief Function called every frame for system events
    ///
    ///////////////////////////////////////////////////////////
    virtual void PoolEvents();

	///////////////////////////////////////////////////////////
	/// \brief Function called every frame for calculations
	///
	///////////////////////////////////////////////////////////
	virtual void Update();

	///////////////////////////////////////////////////////////
	/// \brief Function called every frame for drawing
	///
	///////////////////////////////////////////////////////////
	virtual void Draw();
};

///////////////////////////////////////////////////////////
/// \brief The StateManager is used to set the current game
/// state, update and draw it.
///
///////////////////////////////////////////////////////////
class StateManager
{
public:
	// ================================
	// ====>> MEMBER FUNCTIONS
	// ================================

	///////////////////////////////////////////////////////////
	/// \brief Contructor
	///
	///////////////////////////////////////////////////////////
	StateManager();

	///////////////////////////////////////////////////////////
	/// \brief Destructor
	///
	///////////////////////////////////////////////////////////
    ~StateManager();
    
    ///////////////////////////////////////////////////////////
    /// \brief Set state ID
    ///
    ///////////////////////////////////////////////////////////
    void SetStateID(const unsigned int ID);
    
    ///////////////////////////////////////////////////////////
    /// \brief Get state ID
    ///
    ///////////////////////////////////////////////////////////
    const unsigned int GetStateID() const;
    
    ///////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////
    const bool isStateIDChanged();

	///////////////////////////////////////////////////////////
	/// \brief Set the current state
	///
	///////////////////////////////////////////////////////////
	void StateLoad(GameState* state);
    
    ///////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////
    void StateUnload();
    
    ///////////////////////////////////////////////////////////
    /// \brief PoolEvents in the current state
    ///
    ///////////////////////////////////////////////////////////
    void StatePoolEvents();

	///////////////////////////////////////////////////////////
	/// \brief Draw the current state
	///
	///////////////////////////////////////////////////////////
	void StateDraw();

	///////////////////////////////////////////////////////////
	/// \brief Update the current state
	///
	///////////////////////////////////////////////////////////
	void StateUpdate();
    
private:

	// ================================
	// ====>> MEMBER DATA
	// ================================
    
    unsigned int m_StateID = 0;
    bool m_StateIDChanged = false;
    GameState* m_State;
};

#endif

